Pseudo code for finding the middle node of a singly linked list:

// Define a function to find the middle node
function findMiddleNode(head):
    // Initialize two pointers to the head of the list
    slow = head
    fast = head

    // Traverse the list with two pointers, one moving at twice the speed of the other
    while fast AND fast.next:
        slow = slow.next
        fast = fast.next.next

    // When the fast pointer reaches the end of the list, the slow pointer will be at the middle node
    return slow
Time complexity: O(n), where n is the number of nodes in the linked list. We traverse the list once with two pointers, one moving at twice the speed of the other.

Space complexity: O(1), as we use only two pointers to traverse the list and no additional data structure is used.

In the worst case, when the linked list has an odd number of nodes, we need to traverse the entire list. In the best case, when the linked list has only one node, we return the head node without traversing the list.
