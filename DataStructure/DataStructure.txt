Pseudo code for implementing Queue DS using Arrays:

// Initialize array and front and rear pointers
array queue[MAX_SIZE]
int front = -1
int rear = -1

// Function to check if the queue is empty
bool is_empty():
    return front == -1

// Function to check if the queue is full
bool is_full():
    return rear == MAX_SIZE - 1

// Function to add an element to the queue
void enqueue(int value):
    if is_full():
        return "Queue Overflow"
    else:
        if front == -1:
            front = 0
        rear = rear + 1
        queue[rear] = value

// Function to remove an element from the queue
void dequeue():
    if is_empty():
        return "Queue Underflow"
    else:
        value = queue[front]
        if front == rear:
            front = -1
            rear = -1
        else:
            front = front + 1
        return value
The time complexity for Enqueue and Dequeue operations in this implementation is O(1).

To implement a Max Priority Queue, we need to make the following changes:

Assign a priority to each element in the queue.
Modify the Enqueue operation to add elements to the queue in a sorted order based on their priority.
Modify the Dequeue operation to remove the element with the highest priority from the queue.
Pseudo code for implementing Max Priority Queue using Arrays:

// Initialize array and front and rear pointers
array queue[MAX_SIZE]
int front = -1
int rear = -1

// Function to check if the queue is empty
bool is_empty():
    return front == -1

// Function to check if the queue is full
bool is_full():
    return rear == MAX_SIZE - 1

// Function to add an element to the queue based on its priority
void enqueue(int value, int priority):
    if is_full():
        return "Queue Overflow"
    else:
        if front == -1:
            front = 0
        rear = rear + 1
        i = rear
        while i > front AND priority > queue[i-1].priority:
            queue[i] = queue[i-1]
            i = i - 1
        queue[i].value = value
        queue[i].priority = priority

// Function to remove an element with the highest priority from the queue
void dequeue():
    if is_empty():
        return "Queue Underflow"
    else:
        value = queue[front].value
        if front == rear:
            front = -1
            rear = -1
        else:
            front = front + 1
        return value
In this implementation, each element in the queue is represented as a structure with a value and a priority. The Enqueue operation adds elements to the queue in a sorted order based on their priority, and the Dequeue operation removes the element with the highest priority from the queue.

The time complexity for Enqueue operation in this implementation is O(n) in the worst case when the queue is already sorted in decreasing order of priorities. The time complexity for Dequeue operation is O(1) as it always removes the element with the highest priority from the front of the queue.
